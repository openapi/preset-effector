const { compileTemplate } = require('./src/template');
const { renderProgram, createEffect } = require('./src');

const BEFORE = `
// @ts-nocheck

// {{TITLE}} {{VERSION}}
// ---
// This file is automatically generated by openapi with preset effector-openapi-preset
// Do not edit this file directly. Instead open openapi config file and follow the link in "file"
import { createEffect } from '{{EFFECTOR}}';
import * as typed from 'typed-contracts';
import { {{REQUEST_NAME}} } from '{{REQUEST_PATH}}';

//#region prebuilt code
const custom = { any: (valueName: string, value: unknown): any => value }

export type GenericErrors =
  | {
      status: 'unexpected';
      error: Error;
    }
  | {
      status: 'unknown_status';
      error: { status: number; body: unknown };
    }
  | {
      status: 'validation_error';
      error: typed.ValidationError;
    };

type ErrorCodes = 400 | 401 | 402 | 403 | 404 | 405 | 406 | 500 | 501 | 502 | 503 | 505;
/**
 * @throws
 */
function parseByStatus<
  Variants extends string,
  Contracts extends Record<number, [Variants, typed.Contract<any>]>,
  Result extends {
    [Code in keyof Contracts]: Contracts[Code] extends [infer Status, typed.Contract<infer T>]
      ? { status: Status; answer: T }
      : never;
  }
>(
  name: string,
  response: { status: number; body?: unknown },
  contracts: Contracts,
): Result[Exclude<keyof Result, ErrorCodes>] {
  const contractObject = contracts[response.status];
  if (!contractObject) {
    throw {
      status: 'unknown_status',
      error: {
        status: response.status,
        body: response.body,
      },
    };
  }
  const [status, contract] = contractObject;
  const answer = contract(name, response.body);
  if (answer instanceof typed.ValidationError) {
    throw { status: 'validation_error', error: answer };
  }
  if (response.status >= 400) {
    throw { status, error: answer };
  }
  return { status, answer } as Result[Exclude<keyof Result, ErrorCodes>];
}

//#endregion prebuilt code
`.trim();

const METHOD = `
/* --- */
//#region {{METHOD_NAME}}
{{METHOD_CONTENT}}
//#endregion {{METHOD_NAME}}
`.trim();

module.exports = ({
  effectorImport = 'effector',
  requestName = 'requestFx',
  requestPath = './request',
} = {}) => ({
  importRequest: 'disabled',
  disableTypesGenerate: true,

  templateFileNameCode: ({ swaggerData, changeCase }) =>
    `${changeCase.paramCase(swaggerData.info.title)}.ts`,

  templateCodeBefore: ({ swaggerData }) =>
    compileTemplate(BEFORE, {
      TITLE: swaggerData.info.title,
      VERSION: swaggerData.info.version,
      EFFECTOR: effectorImport,
      REQUEST_NAME: requestName,
      REQUEST_PATH: requestPath,
    }),

  templateRequestCode: (
    { name, method, url },
    { requestSwaggerData, changeCase },
  ) =>
    compileTemplate(METHOD, {
      METHOD_NAME: changeCase.camelCase(name),
      METHOD_CONTENT: renderProgram(
        createEffect({ name, path: url, method }, requestSwaggerData, {
          requestName,
        }),
      ),
    }),
});
